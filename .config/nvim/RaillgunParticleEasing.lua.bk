local RailgunParticleEasing = { configs = {} }
RailgunParticleEasing.__index = RailgunParticleEasing

--- @class RailgunParticleEasing.keyframe
--- @field phase number
--- @field curl number

function RailgunParticleEasing.new(modifiers)
  local self = setmetatable({}, RailgunParticleEasing)
  self.partical_modifiers = modifiers
    or {
      [1] = { phase = 1.5, curl = 1.0 },
      [2] = { phase = 2.0, curl = 2.5 },
      [4] = { phase = 3.5, curl = 6.0 },
      [3] = { phase = 2.8, curl = 4.0 },
    }
  return self
end

---Cubic BÃ©zier ease-in-out approximation
---@param t number Input value between 0 and 1 representing animation progress
---@return number Smoothed value between 0 and 1
function RailgunParticleEasing:bezierEaseInOut(t)
  if t < 0.5 then
    return 4 * t * t * t
  else
    return 1 - (-2 * t + 2) ^ 3 / 2
  end
end

--- Interpolates railgun particle effect values based on a given intensity and animation progress
---@param level number Intensity (1-4)
---@param time number Animation progress (0-1)
---@return table|nil Table with eased phase and curl, or nil if level is invalid
function RailgunParticleEasing:getEasingModifiedConfig(level, time)
  level = math.max(1, math.min(4, level))
  local normalizedTime = (level - 1) / 3
  local easedTime = self:bezierEaseInOut(normalizedTime)

  local function lerp(a, b, t)
    return a + (b - a) * t
  end

  local function getInterpolatedValue(key1, key2, t)
    return {
      phase = lerp(key1.phase, key2.phase, t),
      curl = lerp(key1.curl, key2.curl, t),
    }
  end

  local key1, key2
  if level <= 2 then
    key1 = self.partical_modifiers[1]
    key2 = self.partical_modifiers[2]
  elseif level <= 3 then
    key1 = self.partical_modifiers[2]
    key2 = self.partical_modifiers[3]
  else
    key1 = self.partical_modifiers[3]
    key2 = self.partical_modifiers[4]
  end

  if not key1 or not key2 then return nil end
  return getInterpolatedValue(key1, key2, easedTime)
end

--- Takes a particle configuration, intensity level (1-4), and animation
--- Applies smooth easing transitions between different intensity levels
--- Modifies the particle behavior by updating its phase and curl
---
--- The intensity levels (1-4) allow for different strengths of the effect:
--- - Level 1: Subtle effect with minimal phase (1.5) and curl (1.0)
--- - Level 4: Most intense effect with higher phase (3.5) and curl (6.0)
---
--- The easing function ensures smooth transitions between these intensity levels, preventing jarring visual changes. The particle configuration can be dynamically adjusted based on:
--- 1. How fast you're typing
--- 2. How quickly you're moving the cursor
--- 3. User preferences for effect intensity
function RailgunParticleEasing:applyEasingToParticleConfig(config, level, time)
  local easing = self:getEasingModifiedConfig(level, time)
  if not easing then return end
  config.phase = easing.phase
  config.curl = easing.curl
end

---@param n integer number of configs
---@param min_level integer minimum intensity level
---@param max_level integer maximum intensity level
---@return self
function RailgunParticleEasing:generateConfigs(n, min_level, max_level)
  local configs = {}
  min_level = min_level or 1
  max_level = max_level or 4
  local time = 0
  local level_range = max_level - min_level
  for i = 1, n do
    time = (i - 1) / (n - 1)
    local level = min_level + (level_range * (i - 1) / (n - 1))
    configs[i] = self:getEasingModifiedConfig(level, time) --level, 0.5
  end
  self.configs = configs
  return self
end

---@param n config number from the list of eased configurations based on bezier curve
function RailgunParticleEasing:setConfig(n)
  print(self.configs)

  local config = self.configs[1]
  for k, v in pairs(config) do
    print(string.format("%s: %d", k:sub(1, 1):upper() .. k:sub(2), v))
    vim.g["neovide_cursor_vfx_particle_" .. k] = v
  end
  return config
end

return RailgunParticleEasing
