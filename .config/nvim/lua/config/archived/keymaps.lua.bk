-- Keymaps are automatically loaded on the VeryLazy event
-- Default keymaps that are always set:
-- https://github.com/LazyVim/LazyVim/blob/main/lua/lazetyvim/config/keymaps.lua
-- Add any additional keymaps here

-- Default keymaps
local Util = require("lazyvim.util")
local K = require("config.keymap.util")
local map = K.map

local opts = { silent = true }

-- better up/do
map({ "n", "x" }, "j", "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })
map({ "n", "x" }, "k", "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })

-- Move Lines
map("n", "<A-j>", "<cmd>m .+1<cr>==", { desc = "Move down" })
map("n", "<A-k>", "<cmd>m .-2<cr>==", { desc = "Move up" })
map("i", "<A-j>", "<esc><cy md>m .+1<cr>==gi", { desc = "Move down" })
map("i", "<A-k>", "<esc><cmd>m .-2<cr>==gi", { desc = "Move up" })
map("v", "<A-j>", ":m '>+1<cr>gv=gv", { desc = "Move down" })
map("v", "<A-k>", ":m '<-2<cr>gv=gv", { desc = "Move up" })

-- buffers
if Util.has("bufferline.nvim") then
  map("n", "<S-h>", "<cmd>BufferLineCyclePrev<cr>", { desc = "Prev buffer" })
  map("n", "<S-l>", "<cmd>BufferLineCycleNext<cr>", { desc = "Next buffer" })
  map("n", "[b", "<cmd>BufferLineCyclePrev<cr>", { desc = "Prev buffer" })
  map("n", "]b", "<cmd>BufferLineCycleNext<cr>", { desc = "Next buffer" })
else
  map("n", "<S-h>", "<cmd>bprevious<cr>", { desc = "Prev buffer" })
  map("n", "<S-l>", "<cmd>bnext<cr>", { desc = "Next buffer" })
  map("n", "[b", "<cmd>bprevious<cr>", { desc = "Prev buffer" })
  map("n", "]b", "<cmd>bnext<cr>", { desc = "Next buffer" })
end
map("n", "<leader>bb", "<cmd>e #<cr>", { desc = "Switch to Other Buffer" })
map("n", "<leader>`", "<cmd>e #<cr>", { desc = "Switch to Other Buffer" })

-- Quit
-- Close current buffer
map("n", "<S-q>", "<cmd>bdelete!<CR>", { silent = true })
-- Close buffers
map("n", "<leader>qq", "<cmd>qa<cr>", { desc = "Quit all" })

-- Clear search with <esc>
map({ "i", "n" }, "<esc>", "<cmd>noh<cr><esc>", { desc = "Escape and clear hlsearch" })

-- Clear search, diff update and redraw
-- taken from runtime/lua/_editor.lua
map(
  "n",
  "<leader>ur",
  "<Cmd>nohlsearch<Bar>diffupdate<Bar>normal! <C-L><CR>",
  { desc = "Redraw / clear hlsearch / diff update" }
)

map({ "n", "x" }, "gw", "*N", { desc = "Search word under cursor" })

-- https://github.com/mhinz/vim-galore#saner-behavior-of-n-and-n
map("n", "n", "'Nn'[v:searchforward]", { expr = true, desc = "Next search result" })
map("x", "n", "'Nn'[v:searchforward]", { expr = true, desc = "Next search result" })
map("o", "n", "'Nn'[v:searchforward]", { expr = true, desc = "Next search result" })
map("n", "N", "'nN'[v:searchforward]", { expr = true, desc = "Prev search result" })
map("x", "N", "'nN'[v:searchforward]", { expr = true, desc = "Prev search result" })
map("o", "N", "'nN'[v:searchforward]", { expr = true, desc = "Prev search result" })

-- Add undo break-points
map("i", ",", ",<c-g>u")
map("i", ".", ".<c-g>u")
map("i", ";", ";<c-g>u")

-- save file
map({ "i", "v", "n", "s" }, "<C-s>", "<cmd>w<cr><esc>", { desc = "Save file" })

-- better indenting
map("v", "<", "<gv")
map("v", ">", ">gv")

-- Comment
map("n", "<leader>/", "<cmd>lua require('Comment.api').toggle.linewise.current()<CR>", opts)
map("x", "<leader>/", "<esc><cmd>lua require('Comment.api').toggle.linewise(vim.fn.visualmode())<CR>", opts)

-- Better paste
map("v", "p", '"_dP', opts)

-- Press jk fast to enter
map("i", "jk", "<ESC>", opts)

-- lazy
map("n", "<leader>l", "<cmd>Lazy<cr>", { desc = "Lazy" })

-- new file
map("n", "<leader>fn", "<cmd>enew<cr>", { desc = "New File" })

map("n", "<leader>xl", "<cmd>lopen<cr>", { desc = "Location List" })
map("n", "<leader>xq", "<cmd>copen<cr>", { desc = "Quickfix List" })

if not Util.has("trouble.nvim") then
  map("n", "[q", vim.cmd.cprev, { desc = "Previous quickfix" })
  map("n", "]q", vim.cmd.cnext, { desc = "Next quickfix" })
end

-- Keyboard remap for Mac fr
local symbol_key_opts = { desc = "which_key_ignore" }

map("n", "æ", "<A-a>", symbol_key_opts)
map("n", "Â", "<A-z>", symbol_key_opts)
map("n", "ê", "<A-e>", symbol_key_opts)
map("n", "®", "<A-r>", symbol_key_opts)
map("n", "†", "<A-t>", symbol_key_opts)
map("n", "Ú", "<A-y>", symbol_key_opts)
map("n", "º", "<A-u>", symbol_key_opts)
map("n", "î", "<A-i>", symbol_key_opts)
map("n", "œ", "<A-o>", symbol_key_opts)
map("n", "π", "<A-p>", symbol_key_opts)
map("n", "‡", "<A-q>", symbol_key_opts)
map("n", "Ò", "<A-s>", symbol_key_opts)
map("n", "∂", "<A-d>", symbol_key_opts)
map("n", "ƒ", "<A-f>", symbol_key_opts)
map("n", "ﬁ", "<A-g>", symbol_key_opts)
map("n", "Ì", "<A-h>", symbol_key_opts)
map("n", "Ï", "<A-j>", symbol_key_opts)
map("n", "È", "<A-k>", symbol_key_opts)
map("n", "¬", "<A-l>", symbol_key_opts)
map("n", "µ", "<A-m>", symbol_key_opts)
map("n", "‹", "<A-w>", symbol_key_opts)
map("n", "≈", "<A-x>", symbol_key_opts)
map("n", "©", "<A-c>", symbol_key_opts)
map("n", "◊", "<A-v>", symbol_key_opts)
map("n", "ß", "<A-b>", symbol_key_opts)
-- map("n", "~", "<A-n>") -- don't want to remap this one
map("n", "Æ", "<S-A-a>", symbol_key_opts)
map("n", "Å", "<S-A-z>", symbol_key_opts)
map("n", "Ê", "<S-A-e>", symbol_key_opts)
map("n", "‚", "<S-A-r>", symbol_key_opts)
map("n", "™", "<S-A-t>", symbol_key_opts)
map("n", "ª", "<S-A-u>", symbol_key_opts)
map("n", "ï", "<S-A-i>", symbol_key_opts)
map("n", "Œ", "<S-A-o>", symbol_key_opts)
map("n", "∏", "<S-A-p>", symbol_key_opts)
map("n", "Ÿ", "<S-A-y>", symbol_key_opts)
map("n", "Ω", "<S-A-q>", symbol_key_opts)
map("n", "∑", "<S-A-s>", symbol_key_opts)
map("n", "∆", "<S-A-d>", symbol_key_opts)
map("n", "·", "<S-A-f>", symbol_key_opts)
map("n", "ﬂ", "<S-A-g>", symbol_key_opts)
map("n", "Î", "<S-A-h>", symbol_key_opts)
map("n", "Í", "<S-A-j>", symbol_key_opts)
map("n", "Ë", "<S-A-k>", symbol_key_opts)
-- map("n", "|", "<S-A-l>") -- make conflicts I think cause it's a coditional key
map("n", "Ó", "<S-A-m>", symbol_key_opts)
map("n", "›", "<S-A-w>", symbol_key_opts)
map("n", "⁄", "<S-A-x>", symbol_key_opts)
map("n", "¢", "<S-A-c>", symbol_key_opts)
map("n", "√", "<S-A-v>", symbol_key_opts)
map("n", "∫", "<S-A-b>", symbol_key_opts)
map("n", "ı", "<S-A-n>", symbol_key_opts)
-- END Keyboard remap for Mac fr

local symbol_keys = {
  "æ",
  "Â",
  "ê",
  "®",
  "†",
  "Ú",
  "º",
  "î",
  "œ",
  "π",
  "‡",
  "Ò",
  "∂",
  "ƒ",
  "ﬁ",
  "Ì",
  "Ï",
  "È",
  "¬",
  "µ",
  "‹",
  "≈",
  "©",
  "◊",
  "ß",
  "Æ",
  "Å",
  "Ê",
  "‚",
  "™",
  "ª",
  "ï",
  "Œ",
  "∏",
  "Ÿ",
  "Ω",
  "∑",
  "∆",
  "·",
  "ﬂ",
  "Î",
  "Í",
  "Ë",
  "Ó",
  "›",
  "⁄",
  "¢",
  "√",
  "∫",
  "ı",
}

-- for _, key in ipairs(symbol_keys) do
--   map("n", "<A-" .. key .. ">", "<cmd>WhichKey '<A-" .. key .. ">'<cr>", { desc = "which_key_ignore" })
--   map("n", "<S-A-" .. key .. ">", "<cmd>WhichKey '<S-A-" .. key .. ">'<cr>", { desc = "which_key_ignore" })
-- end

-- Telescope
map("n", "<leader>ff", ":Telescope find_files<CR>", opts)
map("n", "<leader>ft", ":Telescope live_grep<CR>", opts)
map("n", "<leader>fp", ":Telescope projects<CR>", opts)
map("n", "<leader>fb", ":Telescope buffers<CR>", opts)

-- require("telescope").load_extension("project")
-- map("n", "<leader>fw", ":lua  require('telescope').extensions.project.project({})", { noremap = true, silent = true })

-- Git
map("n", "<leader>gg", "<cmd>lua _LAZYGIT_TOGGLE()<CR>", opts)


-- stylua: ignore start

-- toggle options
map("n", "<leader>lf", "<cmd>lua vim.lsp.buf.format{ async = true }<cr>", opts)
map("n", "<leader>uf", require("lazyvim.util").format.toggle, { desc = "Toggle format on Save" })
local conceallevel = vim.o.conceallevel > 0 and vim.o.conceallevel or 3
map("n", "<leader>uc", function() Util.toggle("conceallevel", false, {0, conceallevel}) end, { desc = "Toggle Conceal" })
if vim.lsp.inlay_hint then
  map("n", "<leader>uh", function() vim.lsp.inlay_hint(0, nil) end, { desc = "Toggle Inlay Hints" })
end

-- lazygit
map("n", "<leader>gg", function() Util.terminal.open({ "lazygit" }, { cwd = Util.root.get(), esc_esc = false, ctrl_hjkl = false }) end, { desc = "Lazygit (root dir)" })
map("n", "<leader>gG", function() Util.terminal.open({ "lazygit" }, {esc_esc = false, ctrl_hjkl = false}) end, { desc = "Lazygit (cwd)" })

-- highlights under cursor
if vim.fn.has("nvim-0.9.0") == 1 then
  map("n", "<leader>ui", vim.show_pos, { desc = "Inspect Pos" })
end
-- floating terminal
map("n", "<leader>fR", K.lazyterm, { desc = "Terminal (root dir)" })
map("n", "<leader>fT", function() Util.terminal.open() end, { desc = "Terminal (cwd)" })
-- map("n", "<ce/>", K.lazyterm, { desc = "Terminal (root dir)" })
map("n", "<c-_>", K.lazyterm, { desc = "which_key_ignore" })

-- Resize window using <ctrl> arrow keys
map("n", "<C-Up>", "<cmd>resize +2<cr>", { desc = "Increase window height" })
map("n", "<C-Down>", "<cmd>resize -2<cr>", { desc = "Decrease window height" })
map("n", "<C-Left>", "<cmd>vertical resize -2<cr>", { desc = "Decrease window width" })
map("n", "<C-Right>", "<cmd>vertical resize +2<cr>", { desc = "Increase window width" })

-- Move to window using the <ctrl> hjkl keys
-- map("n", "<C-h>", "<C-w>h", { desc = "Go to left window", remap = true })
-- map("n", "<C-j>", "<C-w>j", { desc = "Go to lower window", remap = true })
-- map("n", "<C-k>", "<C-w>k", { desc = "Go to upper window", remap = true })
-- map("n", "<C-l>", "<C-w>l", { desc = "Go to right window", remap = true })

-- Terminal Mappings
-- Disabled while plugins are lazy loaded
-- map('n', '<C-h>', '<Cmd>NvimTmuxNavigateLeft<CR>', { noremap = true, desc = "Go to left window", silent = true })
-- map('n', '<C-j>', '<Cmd>NvimTmuxNavigateDown<CR>', { noremap = true, desc = "Go to lower window", silent = true })
-- map('n', '<C-k>', '<Cmd>NvimTmuxNavigateUp<CR>', { noremap = true, desc = "Go to upper window", silent = true })
-- map('n', '<C-l>', '<Cmd>NvimTmuxNavigateRight<CR>', { noremap = true, desc = "Go to right window", silent = true })
-- map('n', '<C-\\>', '<Cmd>NvimTmuxNavigateLastActive<CR>', { silent = true })
-- map('n', '<C-Space>', '<Cmd>NvimTmuxNavigateNext<CR>', { silent = true })

-- map("t", "<C-h>", "<cmd>wincmd h<cr>", { desc = "Go to left window" })
-- map("t", "<C-j>", "<cmd>wincmd j<cr>", { desc = "Go to lower window" })
-- map("t", "<C-k>", "<cmd>wincmd k<cr>", { desc = "Go to upper window" })
-- map("t", "<C-l>", "<cmd>wincmd l<cr>", { desc = "Go to right window" })
map("t", "<C-/>", "<cmd>close<cr>", { desc = "Hide Terminal" })
map("t", "<c-_>", "<cmd>close<cr>", { desc = "which_key_ignore" })

-- windows
map("n", "<leader>ww", "<C-W>p", { desc = "Other window", remap = true })
map("n", "<leader>wd", "<C-W>c", { desc = "Delete window", remap = true })
map("n", "<leader>w-", "<C-W>s", { desc = "Split window below", remap = true })
map("n", "<leader>w|", "<C-W>v", { desc = "Split window right", remap = true })
map("n", "<leader>-", "<C-W>s", { desc = "Split window below", remap = true })
map("n", "<leader>|", "<C-W>v", { desc = "Split window right", remap = true })

-- tabs
map("n", "<leader><tab>l", "<cmd>tablast<cr>", { desc = "Last Tab" })
map("n", "<leader><tab>f", "<cmd>tabfirst<cr>", { desc = "First Tab" })
map("n", "<leader><tab><tab>", "<cmd>tabnew<cr>", { desc = "New Tab" })
map("n", "<leader><tab>]", "<cmd>tabnext<cr>", { desc = "Next Tab" })
map("n", "<leader><tab>d", "<cmd>tabclose<cr>", { desc = "Close Tab" })
map("n", "<leader><tab>[", "<cmd>tabprevious<cr>", { desc = "Previous Tab" })
map("n", "<leader><tab>-", "<cmd>tabonly<cr>", { desc = "Close Other Tabs"})

-- custom
map("n", "<leader>cp", ":let @+=expand('%:p')" .. '<cr>', { desc = "Copy full path of file to clipboard" })
map('n', '<leader>fo', ':!open ' .. vim.fn.expand('%:p:h') .. '<cr>', { noremap = true, silent = true })
map('n', '<leader>wk', '<cmd>WhichKey<cr>', { noremap = true, silent = true })
-- WhichKey = require('which-key')
map('n', '<leader>wK', ':lua WhichKey<cr>', { noremap = true, silent = true })

-- Define a function to copy selected text to pbcopy
map('n', '<leader>cc', K.copy_to_pbcopy, { noremap = true, silent = true })

require("luasnip.loaders.from_lua").lazy_load()
-- set keybinds for both INSERT and VISUAL.
map("i", "<C-n>", "<plug>luasnip-next-choice", {})
map("s", "<C-n>", "<plug>luasnip-next-choice", {})
map("i", "<C-p>", "<plug>luasnip-prev-choice", {})
map("s", "<C-p>", "<plug>luasnip-prev-choice", {})

map('n', '<leader>r', K.find_and_replace(), { noremap = true, silent = true })
map('n', '<leader>rl', function() K.find_and_replace_within_lines() end,{ silent = true })


map('n', '<leader>cr', ':lua vim.cmd("source ~/.config/nvim/init.lua")<CR>', { noremap = true })

map("n", "<leader>nt", "<cmd>NoiceTelescope<cr>", { noremap = true })
map("n", "gd", "<cmd>Telescope lsp_definitions<cr>")

map("n", "dm", K.delete_mark, { noremap = true })
map("n", "dM",  function() vim.cmd("delmarks a-z0-9") end, { noremap = true })


-- Web search & URL handling






map("v", "<leader>gs", ":lua search_google()<CR>", {noremap = true, silent = true})
map("n", "<leader>gl", function() K.open_url() end, {noremap = true, silent = true})
map("v", "<leader>gl", ":lua v_open_url()<CR>", {noremap = true, silent = true})

-- map('gx', [[:execute '!open ' . shellescape(expand('<cfile>'), 1)<CR>]]}) 

-- Window functions

map("n", ",w", K.pick_window, { noremap = true, desc = "Pick a window" })
map('n', ',W', K.swap_windows, { desc = 'Swap windows' })

-- Copilot
map('n', ',c', function() require("copilot.panel").open({ "bottom", 0.25 }) end, {noremap=true, desc="Pick a window"})

map('n', '<leader>uS', K.toggle_vim_g_variable('enable_leap_lightspeed_mode'), { noremap = true })
map('n', '<leader>rx', K.clear_all_registers(), { noremap = true, desc = "Clear all registers" })

map('n', '<leader>m', '<cmd>Telescope macros<cr>', { noremap = true, desc = "Macros" })
------------------------------------------------------------

-- WhichKey setup
local wk = require("which-key")
local LazyMod = require("config.user.lazy_mods")
wk.setup()
wk.register({
  ["<leader>"] = {
    r = { "<cmd>lua find_and_replace()<CR>", "Find and Replace" },
    b = {
      -- c = { vim.cmd.BaleiaColorize,"Colorize" },
      c = { K.baleia_colorize, "Colorize" },

    },
    c = {
      c = { K.copy_to_pbcopy, "Copy to clipboard" },
      p = { ":let @+=expand('%:p') .. <cr>", "Copy file path to clipboard"},
      r = { "<cmd>lua vim.cmd('source ~/.config/nvim/init.lua')<CR>", "Reload config" },
    },
    m = { "<cmd>Telescope macros<cr>", "Macros" },
    n = {
      t = { "<cmd>NoiceTelescope<cr>", "Noice" },
      n = { "<cmd>Telescope notify<cr>", "Telescope notify" },
      b = { "<cmd>Telescope buffers<cr>", "Buffers"},
      B = { "<cmd>Telescope bookmarks list<cr>", "Bookmarks"},
      c = { "<cmd>Telescope commands<cr>", "Commands"},
      C = { "<cmd>Telescope command_history<cr>", "command history"},
      f = { "<cmd>Telescope file_browser<cr>", "file browser"},
      g = { "<cmd>Telescope git_status<cr>", "Git Status"},
      G = { "<cmd>Telescope git_commits<cr>", "Git Commits"},
      h = { "<cmd>Telescope help_tags<cr>", "Help Tags"},
      l = { "<cmd>Telescope current_buffer_fuzzy_find<cr>", "Current Buffer Fuzzy Find"},
      j = { "<cmd>Telescope jump_list<cr>", "Jump List"},
      m = { "<cmd>Telescope macros<cr>", "Macros"},
      r = { "<cmd>Telescope registers<cr>", "Registers"},
      s = { "<cmd>Telescope spell_suggest<cr>", "Spell Suggest"},
      S = { "<cmd>Telescope session<cr>", "Session"},
      T = { "<cmd>Telescope treesitter<cr>", "Treesitter"},
    },
    g = {
      s = { "<cmd>lua search_google()<CR>", "Search Google" },
    },
    f = {
      o = { ":!open .. vim.fn.expand('%:p:h') .. <cr>", "Reveal in finder" }
    },
    u = {
      d = {  LazyMod.toggle.diagnostics, "Toggle Diagnostics*" },
      S = { K.toggle_vim_g_variable, "Enable leap lightspeed mode"},
      q = { "<Cmd>Trouble<cr>", "Show Trouble" },
    },
    k = {
    --   r = {
    --     x = { clear_all_registers, "Clear all registers" },
    --   },
      k = {
        X = { K.clear_all_registers, "Clear all registers" },
      },
    }
  },
})
wk.register({
  g = {
    d = { "<cmd>Telescope lsp_definitions<cr>", "Go to definition" },
    -- s = { "<cmd>Telescope lsp_document_symbols<cr>", "Go to symbol" },
    -- s = { "<cmd>Telescope lsp_workspace_symbols<cr>", "Go to workspace symbol" },
  }
})
-- Unused

-- local bm = require "bookmarks"
-- map('n', '<leader>Bm', function() bm.bookmark_toggle() end, { noremap = true}) -- add or remove bookmark at current line
-- map('n', '<leader>Bi', function() bm.bookmark_ann()    end, { noremap = true})  -- add or edit mark annotation at current line
-- map('n', '<leader>Bc', function() bm.bookmark_clean()  end, { noremap = true})  -- clean all marks in local buffer
-- map('n', '<leader>Bn', function() bm.bookmark_next()   end, { noremap = true})  -- jump to next mark in local buffer
-- map('n', '<leader>Bp', function() bm.bookmark_prev()   end, { noremap = true})  -- jump to previous mark in local buffer
-- map('n', '<leader>Bl', function() bm.bookmark_list()   end, { noremap = true})  -- show marked file list in quickfix window
