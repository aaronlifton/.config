-- Setup language servers using nvim-lspconfig
local lspconfig = require("lspconfig")
-- local util = require("../util")
lspconfig.pyright.setup({})
lspconfig.tsserver.setup({})
lspconfig.rust_analyzer.setup({
  -- Server-specific settings. See `:help lspconfig-setup`
  settings = {
    ["rust-analyzer"] = {},
  },
})

local capabilities = require("cmp_nvim_lsp").default_capabilities()
lspconfig.tsserver.setup({
  -- on_attach = on_attach,
  capabilities = capabilities,
  root_dir = lspcofig.util.root_pattern("package.json", "tsconfig.json", "jsconfig.json"),
})

-- Use LspAttach autocommand to only map the following keys
-- after the language server attaches to the current buffer
vim.api.nvim_create_autocmd("LspAttach", {
  group = vim.api.nvim_create_augroup("UserLspConfig", {}),
  callback = function(ev)
    -- Enable completion triggered by <c-x><c-o>
    vim.bo[ev.buf].omnifunc = "v:lua.vim.lsp.omnifunc"

    -- Buffer local mappings.
    -- See `:help vim.lsp.*` for documentation on any of the below functions
    local opts = { buffer = ev.buf }
    vim.keymap.set("n", "gD", vim.lsp.buf.declaration, opts)
    vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
    vim.keymap.set("n", "gk", vim.lsp.buf.hover, opts)
    vim.keymap.set("n", "gi", vim.lsp.buf.implementation, opts)
    vim.keymap.set("n", "gK", vim.lsp.buf.signature_help, opts)
    vim.keymap.set("n", "<leader>D", vim.lsp.buf.type_definition, bufopts)
    vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, bufopts)
    vim.keymap.set("n", "<leader>ca", vim.lsp.buf.code_action, bufopts)
    vim.keymap.set("n", "gr", vim.lsp.buf.references, bufopts)
    vim.keymap.set("n", "<leader>f", function()
      vim.lsp.buf.format({ async = true })
    end, bufopts)
    -- vim.keymap.set("n", "<leader>wa", vim.lsp.buf.add_workleader_folder, opts)
    -- vim.keymap.set("n", "<leader>wr", vim.lsp.buf.remove_workleader_folder, opts)
    -- vim.keymap.set("n", "<leader>wl", function()
    --   print(vim.inspect(vim.lsp.buf.list_workleader_folders()))
    -- end, opts)
    -- vim.keymap.set("n", "<leader>D", vim.lsp.buf.type_definition, opts)
    -- vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts)
    -- vim.keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, opts)
    -- vim.keymap.set("n", "gr", vim.lsp.buf.references, opts)
    -- vim.keymap.set("n", "<leader>f", function()
    --   vim.lsp.buf.format({ async = true })
    -- end, opts)
  end,
})

-- For frontend setup (see https://nathan-long.com/blog/modern-javascript-tooling-in-neovim/)
-- local capabilities = require('cmp_nvim_lsp').default_capabilities()
--
-- -- Capabilities required for the visualstudio lsps (css, html, etc)
-- capabilities.textDocument.completion.completionItem.snippetSupport = true
--
-- -- Activate LSPs
-- -- All LSPs in this list need to be manually installed via NPM/PNPM/whatevs
-- local lspconfig = require('lspconfig')
-- local servers = { 'tailwindcss', 'tsserver', 'jsonls', 'eslint' }
-- for _, lsp in pairs(servers) do
--   lspconfig[lsp].setup {
--     on_attach = on_attach,
--     capabilites = capabilities,
--   }
-- end
--
-- -- This is an interesting one, for some reason these two LSPs (CSS/HTML) need to
-- -- be activated separately outside of the above loop. If someone can tell me why,
-- -- send me a note...
-- lspconfig.cssls.setup {
--   on_attach = on_attach,
--   capabilities = capabilities
-- }
--
-- lspconfig.html.setup {
--   on_attach = on_attach,
--   capabilities = capabilities
-- }
