local BasePopup = require("util.nui.base_popup")
local event = require("nui.utils.autocmd").event

---@class InputBox: NuiPopup
local InputBox = BasePopup:extend("InputBox")
local ns_id = vim.api.nvim_create_namespace("input_box_selection")

-- vim.cmd([[hi default CursorLineNormal guibg=#222436]])
local should_debug = true

---@param opts base_popup_options
function InputBox:init(opts)
  opts = opts or {}
  opts.size = opts.size or { width = 60, height = 4 }

  local row_position = 2 -- Default position is 2 lines below

  self.last_bufnr = vim.api.nvim_get_current_buf()
  self.mode = vim.fn.mode()
  self.cursor_pos = vim.api.nvim_win_get_cursor(0)

  if self.mode:match("[vV]") then
    local v = self.mode == "v"
    local cursor_pos = vim.fn.getpos(".")
    local visual_pos = vim.fn.getpos("v")
    local cursor_row = cursor_pos[2]
    local cursor_col = cursor_pos[3]
    local visual_row = visual_pos[2]
    local visual_col = visual_pos[3]

    -- Store positions for highlighting
    local cursor_row_before = cursor_row <= visual_row
    self.start_row = math.min(cursor_row, visual_row)
    if v then
      if cursor_row_before then
        self.start_col = cursor_col
      else
        self.start_col = visual_col
      end
    else
      self.start_col = 0
    end
    self.end_row = math.max(cursor_row, visual_row)
    if v then
      if cursor_row_before then
        self.end_col = visual_col
      else
        self.end_col = cursor_col
      end
    else
      self.end_col = vim.v.maxcol
    end
    if v then
      if cursor_col > visual_col then
        self.col_position = -1 * (cursor_col - visual_col)
      else
        self.col_position = 0
      end
    else
      self.col_position = -cursor_col + 1
    end
    local start_row, start_col = unpack(vim.api.nvim_buf_get_mark(0, "<"))
    local end_row, end_col = unpack(vim.api.nvim_buf_get_mark(0, ">"))
    if should_debug then
      vim.api.nvim_echo({
        {
          vim.inspect({
            col_position = self.col_position,
            cursor_pos = cursor_pos,
            visual_pos = visual_pos,
            cursor_row = cursor_row,
            cursor_col = cursor_col,
            visual_row = visual_row,
            visual_col = visual_col,
            ["<>"] = { start_row = start_row, start_col = start_col, end_row = end_row, end_col = end_col },
          }),
          "Normal",
        },
      }, true, {})
    end

    local selection_lines = math.abs(visual_row - cursor_row) + 1

    -- Only adjust position if cursor is at the start of selection
    if cursor_row == self.start_row then row_position = selection_lines + 1 end
    -- If cursor is at end of selection, keep default row_position of 2
  end

  opts = vim.tbl_deep_extend("force", {
    relative = "cursor",
    width = opts.size.width,
    height = opts.size.height,
    position = {
      row = row_position,
      col = self.col_position or 0,
    },
    on_mount = function(popup)
      vim.cmd("startinsert!")
      require("cmp").setup.buffer({
        sources = {
          {
            name = "buffer",
            option = {
              get_bufnrs = function()
                -- local tabpage = vim.api.nvim_get_current_tabpage()
                -- local wins_in_tabpage = vim.api.nvim_tabpage_list_wins(tabpage)
                -- local skip_filetypes = { "nofile", "help", "neo-tree", "AvanteChat", "mchat", "codecompanion" }
                -- local bufs = vim
                --   .iter(wins_in_tabpage)
                --   :map(function(win)
                --     return vim.api.nvim_win_get_buf(win)
                --   end)
                --   :filter(function(buf)
                --     if not vim.bo[buf].buflisted then return false end
                --     if vim.tbl_contains(skip_filetypes, vim.bo[buf].filetype) then return false end
                --     return true
                --   end)
                --   :totable()
                -- return bufs
                return require("util.win").editor_bufs()
              end,
            },
          },
        },
      })
    end,
    on_submit = opts and opts.on_submit or function() end,
    on_close = opts and opts.on_close or function() end,
    win_options = {
      -- winhighlight = "Normal:Normal,FloatBorder:Normal",
      winhighlight = "Normal:NormalFloat,FloatBorder:FloatBorder,CursorLine:PmenuSel,Search:None",
      cursorline = true,
    },
    enter = true,
    focusable = true,
    border = {
      style = "rounded",
      text = {
        top = opts.title or " Prompt ",
        top_align = "center",
      },
    },
    size = {
      width = opts.size.width,
      height = opts.size.height,
    },
    buf_options = {
      modifiable = true,
      readonly = false,
    },
  }, opts or {})

  self.options = opts
  InputBox.super.init(self, opts)
end

function InputBox:mount()
  if self.start_row and self.end_row then
    local end_offset
    if self.mode == "v" then
      end_offset = 1
    else
      end_offset = 0
    end

    local start_col = self.mode == "v" and self.start_col - 1 or self.start_col
    local opts = { priority = 100 }
    if self.mode == "V" then opts.regtype = "V" end
    if self.start_row == self.end_row then
      local prev_start_col = start_col
      start_col = math.min(start_col, self.end_col)
      self.end_col = math.max(prev_start_col, self.end_col)
    end
    if should_debug then
      vim.api.nvim_echo({
        { "Highlight span\n", "Title" },
        {
          vim.inspect({
            start_row = self.start_row - 1,
            start_col = start_col,
            end_row = self.end_row - end_offset,
            end_col = self.end_col,
            cursor_pos = self.cursor_pos,
            opts = opts,
          }),
          "Normal",
        },
      }, true, {})
    end
    vim.schedule(function()
      -- vim.highlight.range(
      --   self.last_bufnr,
      --   ns_id,
      --   "CursorLineNormal",
      --   { self.cursor_pos[1], 0 },
      --   { self.cursor_pos[1], 200 },
      --   { priority = 99 }
      -- )
      vim.highlight.range(
        self.last_bufnr,
        ns_id,
        "PMenuSel",
        { self.start_row - 1, start_col },
        { self.end_row - end_offset, self.end_col },
        opts
      )
    end)

    local function clear_highlight()
      vim.api.nvim_buf_clear_namespace(self.last_bufnr, ns_id, 0, -1)
      vim.cmd([[hi default CursorLine NONE]])
    end

    self:on(event.BufLeave, clear_highlight)
    self:on(event.BufUnload, clear_highlight)
  end

  InputBox.super.mount(self)

  local function close()
    self.options.on_close()
    self:unmount()
  end

  local submit_prompt = function()
    local contents = vim.api.nvim_buf_get_lines(self.bufnr, 0, -1, false)
    local result = table.concat(contents, "\n")
    self.options.on_submit(result)
    self:unmount()
  end

  self:set_keymap({
    ["<CR>"] = {
      callback = submit_prompt,
      desc = "Submit prompt",
    },
    ["<C-s>"] = {
      callback = submit_prompt,
      desc = "Submit prompt",
      mode = "i",
    },
    ["<ESC>"] = {
      callback = close,
      desc = "Close",
    },
    ["<C-c>"] = {
      callback = close,
      desc = "Close",
      mode = { "n", "i" },
    },
    ["Q"] = {
      callback = close,
      desc = "Close",
    },
  })
end

return InputBox
