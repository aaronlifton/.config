local job = require("plenary.job")
local curl = require("plenary.curl")

local fetch = function(callback)
  curl.get("https://api.rubyonrails.org/", {
    callback = vim.schedule_wrap(function(response)
      if response.status ~= 200 then return callback(nil) end
      callback(response)
    end),
    on_error = function(error)
      log.error("(" .. alias .. ") Error during download, exit code: " .. error.exit)
    end,
  })
end

---Returns the text at a given range, zero based index
function get_text_range(row_start, col_start, row_end, col_end)
  local extracted_lines = {}

  for i = row_start, row_end do
    local line = self.lines[i + 1]

    if row_start == row_end then
      line = line:sub(col_start + 1, col_end)
    elseif i == row_start then
      line = line:sub(col_start + 1)
    elseif i == row_end then
      line = line:sub(1, col_end)
    end

    table.insert(extracted_lines, line)
  end

  return table.concat(extracted_lines, "\n")
end
---@param node TSNode
---@return string
function get_node_text(node)
  if not node then return "" end

  local row_start, col_start = node:start()
  local row_end, col_end = node:end_()
  local text = self:get_text_range(row_start, col_start, row_end, col_end)

  return text
end

---@param node TSNode
---@return table<string, string>
function get_node_attributes(node)
  if not node then return {} end

  local attributes = {}
  local tag_node = node:named_child()

  if not tag_node then return {} end

  local tag_children = tag_node:named_children()

  for i = 2, #tag_children do
    local attribute_node = tag_children[i]
    local attribute_name_node = attribute_node:named_child()
    local attribute_name = get_node_text(attribute_name_node)
    local value = ""

    if attribute_name_node and attribute_name_node:next_named_sibling() then
      local quotetd_value_node = attribute_name_node:next_named_sibling()
      local value_node = quotetd_value_node:named_child()
      if value_node then value = get_node_text(value_node) end
    end

    attributes[attribute_name] = value
  end

  return attributes
end
---@param node TSNode
local eval = function(node)
  local node_type = node:type()
  local node_text = node:node_text()
  local tag_name = get_node_tag_name(node)
  local attributes = get_node_attributes(node)
  return { node_type = node_type, node_text = node_text, tag_name = tag_name, attributes = attributes }
end

local parse = function(body)
  local parser = vim.treesitter.get_string_parser(body, "html")
  parser:parse()
  local results = {}
  parser:for_each_tree(function(tree)
    local root = tree:root()
    if root then
      local children = root:named_children()
      for _, node in ipairs(children) do
        results[#results + 1] = eval(node)
      end
    end
  end)

  return results
end
fetch(function(res)
  print(res)
  print(parse(res.body))
end)
