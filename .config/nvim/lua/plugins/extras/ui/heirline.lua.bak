return {
  {
    "nvim-lualine/lualine.nvim",
    enabled = false,
  },
  {
    "akinsho/bufferline.nvim",
    enabled = false,
  },
  {
    "zeioth/heirline-components.nvim",
    opts = {
      icons = require("util.icons").nerd_font,
    },
  }, --  heirline [ui components]
  --  https://github.com/rebelot/heirline.nvim
  --  Use it to customize the components of your user interface,
  --  Including tabline, winbar, statuscolumn, statusline.
  --  Be aware some components are positional. Read heirline documentation.
  {
    "rebelot/heirline.nvim",
    dependencies = { "zeioth/heirline-components.nvim" },
    event = "User BaseDefered",
    opts = function()
      local lib = require("heirline-components.all")
      local conditions = require("heirline.conditions")
      local components = require("util.heirline")

      return {
        opts = {
          disable_winbar_cb = function(args) -- We do this to avoid showing it on the greeter.
            local is_disabled = not require("heirline-components.buffer").is_valid(args.buf)
              or lib.condition.buffer_matches({
                buftype = { "terminal", "prompt", "nofile", "help", "quickfix" },
                filetype = { "NvimTree", "neo%-tree", "dashboard", "Outline", "aerial", "triptych" },
              }, args.buf)
            return is_disabled
          end,
        },
        statusline = { -- UI statusbar
          hl = {
            fg = "fg",
            bg = "bg",
          },
          components.Mode, -- status.component.mode()
          components.Git, -- status.component.git_branch() + git_diff()
          components.FileNameBlock, -- status.component.file_info()
          components.Diagnostics, -- status.component.diagnostics()
          components.Fill, -- status.component.fill()
          components.CmdInfo, -- status.component.cmd_info()
          components.Fill, -- status.component.fill()
          -- components.LSPActive, -- status.component.lsp()
          -- components.VirtualEnv, -- status.component.virtual_env()
          components.TreeSitter, -- status.component.treesitter()
          components.Nav, -- status.component.nav()
          lib.component.mode(),
          lib.component.git_branch(),
          lib.component.separated_path(),
          lib.component.file_info(),
          lib.component.git_diff(),
          lib.component.diagnostics(),
          lib.component.fill(),
          lib.component.cmd_info(),
          lib.component.fill(),
          lib.component.lsp(),
          lib.component.compiler_state(),
          lib.component.virtual_env(),
          lib.component.nav(),
          lib.component.mode({
            surround = {
              separator = "right",
            },
          }),
        },
        winbar = {
          init = function(self)
            self.bufnr = vim.api.nvim_get_current_buf()
          end,
          fallthrough = false,
          -- Inactive winbar
          {
            condition = function()
              return not conditions.is_active()
            end,
            components.SeparatedPath,
            {
              components.FileIcon,
              components.FileName,
              hl = {
                fg = "Comment",
              },
              update = "BufEnter",
            },
          },
          -- Active winbar
          { components.Breadcrumbs },
        },
        -- winbar = { -- UI breadcrumbs bar
        --   init = function(self)
        --     self.bufnr = vim.api.nvim_get_current_buf()
        --   end,
        --   fallthrough = false,
        --   -- Winbar for terminal, neotree, and aerial.
        --   {
        --     condition = function()
        --       return not lib.condition.is_active()
        --     end,
        --     {
        --       lib.component.neotree(),
        --       lib.component.compiler_play(),
        --       lib.component.fill(),
        --       lib.component.compiler_build_type(),
        --       lib.component.compiler_redo(),
        --       lib.component.aerial(),
        --     },
        --   },
        --   -- Regular winbar
        --   {
        --     lib.component.neotree(),
        --     lib.component.compiler_play(),
        --     lib.component.fill(),
        --     lib.component.breadcrumbs(),
        --     lib.component.fill(),
        --     lib.component.compiler_redo(),
        --     lib.component.aerial(),
        --   },
        -- },
        tabline = { -- UI upper bar
          lib.component.tabline_conditional_padding(),
          lib.component.tabline_buffers(),
          lib.component.fill({
            hl = {
              bg = "tabline_bg",
            },
          }),
          lib.component.tabline_tabpages(),
        },
        statuscolumn = { -- UI left column
          init = function(self)
            self.bufnr = vim.api.nvim_get_current_buf()
          end,
          lib.component.foldcolumn(),
          -- lib.component.numbercolumn(),
          lib.component.signcolumn(),
        } or nil,
      }
    end,
    config = function(_, opts)
      local heirline = require("heirline")
      local heirline_components = require("heirline-components.all")

      -- Setup
      heirline_components.init.subscribe_to_events()
      heirline.load_colors(heirline_components.hl.get_colors())
      heirline.setup(opts)
    end,
  }, -- {
  --   "rebelot/heirline.nvim",
  --   event = { "BufRead", "BufNewFile" },
  --   config = function()
  --     local cond = require("heirline.conditions")
  --     cond.lsp_attached = function()
  --       return next(vim.lsp.get_clients({ bufnr = 0 })) ~= nil
  --     end
  --
  --     local Mode = require("extra.statusline.mode")
  --     local File = require("extra.statusline.file")
  --     local Diagnostic = require("extra.statusline.diagnostic")
  --     local Git = require("extra.statusline.git")
  --     local Lsp = require("extra.statusline.lsp")
  --     local misc = require("extra.statusline.misc")
  --     local Winbar = require("extra.statusline.winbar")
  --
  --     local colors = require("extra.statusline.colors")
  --     local hl = colors.highlight
  --
  --     local Align = { provider = "%=" }
  --     local Space = setmetatable({ provider = " " }, {
  --       __call = function(_, n)
  --         return { provider = string.rep(" ", n) }
  --       end,
  --     })
  --     local Statusline = {
  --       hl = hl.StatusLine,
  --       static = {
  --         ReadOnly = {
  --           condition = function()
  --             return not vim.bo.modifiable or vim.bo.readonly
  --           end,
  --           provider = "ï€£",
  --           hl = hl.ReadOnly,
  --         },
  --       },
  --       Mode,
  --       Space,
  --       File,
  --       Space,
  --       Git,
  --       Space,
  --       Diagnostic,
  --       Align,
  --       Space,
  --       Lsp,
  --       Space,
  --       misc.TabSize,
  --       Space,
  --       misc.FileProperties,
  --       Space,
  --       misc.Percent,
  --       misc.ModifiableIndicator,
  --     }
  --
  --     local conditions = require("heirline.conditions")
  --     require("heirline").setup({
  --       statusline = Statusline,
  --       winbar = Winbar,
  --       opts = {
  --         disable_winbar_cb = function(args)
  --           return conditions.buffer_matches({
  --             buftype = { "nofile", "prompt", "help", "quickfix", "terminal" },
  --             filetype = {
  --               "^git.*",
  --               "fugitive",
  --               "Trouble",
  --               "dashboard",
  --               "neo-tree",
  --               "lazy",
  --               "mason",
  --               "toggleterm",
  --             },
  --           }, args.buf)
  --         end,
  --       },
  --     })
  --   end,
  -- },
}
