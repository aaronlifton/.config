;; [<from> <to>] o
;; [<from> <to> <conditions>] or
;; [<from> <to> <conditions> <other options>]
;; <from> can be keywords defined in froms or keycodes without `{:not-from true}`
;; <to> can be keywords defined in tos, keycodes without `{:not-to true}`, string (shell script)
;; <conditions> can be keywords defined in layers, devices, applications
;; <other options> {:other {:parameters {:to_delayed_action_delay_milliseconds 100 :basic.to_if_alone_timeout_milliseconds 500 :basic.to_if_held_down_threshold_milliseconds 250}} }
;;  [{:des "a to 1" :rules [[:a :1]]} ;; a to 1
;;   {:des "command a to control 1" :rules [:!Ca :!T1]} ;; command a to control 1
;;   {:des "my spacebar to control 1" :rules [:my-spacebar :!T1]} ;; my-spacebar to control 1
;;   {:des "press b to insert 12" :rules [:b [:1 :2]]}  ;; key to key
;;   {:des "c to example osascript" :rules [:c "osascript -e 'display dialog \"example apple script\"'"]} ;; key to shell script
;;   {:des "d to 1 then example osascript" :rules [:d [:1 "osascript -e 'display dialog \"example apple script\"'"]]} ;; key to key then shell script
;;   {:des "simultaneous e f to 3" :rules [[:e :f] :3]} ;; simultaneous key to key
;;   {:des "g to 4 when variable vi-mode is 1" :rules [:g :4 :vi-mode]} ;; vi-mode is 1
;;   {:des "h to 5 when variable vi-mode is not 1" :rules [:h :5 :!vi-mode]} ;; vi-mode is 0
;;   {:des "i to 6 only for device hhkb-bt" :rules [:i :6 :hhkb-bt]} ;; key to key in layer b (in layer a) specific to hhkb-bt device
;;   {:des "j to 7 on hhkb-bt when variable vi-mode is 1" :rules [:j :7 [:vi-mode :hhkb-bt]]} ;; multiple condition
;;   {:des "press h insert 8 then set variable some-mode to 0" :rules [:h [:8 {:set ["some-mode" 0]}]]}] ;; h to 8 and set_variable

;; https://gist.github.com/justinschuldt/3ce9a22c1446d65261716851c9cd57eb
;; code won't read cheatsheet section
;; ! stand for mandatory
;; # stand for optional
;; C T O S for left command control optional shift
;; F for fn
;; need to prefix C T O S F with ! or #
;
;
;
; ------------------------------------------------------------------------------|
; SUMMARY                                                                       |
;; ------------------------------------------------------------------------------|
; Karabiner-Elements is a low level utility to manage macOS keyboard behavior.  |
; The JSON config for K-E is awkward to manage at any level of complexity and   |
; thus we use Goku to maintain the configuration in EDN and compile it out to   |
; native K-E JSON config.                                                       |
; ------------------------------------------------------------------------------|
; REFERENCES      | URL                                                         |
; ------------------------------------------------------------------------------|
; Karabiner-El:   | https://karabiner-elements.pqrs.org                         |
; GokuRakuJoudo:  | https://github.com/yqrashawn/GokuRakuJoudo                  |
; EDN format:     | https://github.com/edn-format/edn                           |
; Goku Tutorial:  | https://github.com/yqrashawn/GokuRakuJoudo/                 |
;                 | blob/master/tutorial.md                                     |
; Key Codes:      | https://github.com/yqrashawn/GokuRakuJoudo/                 |
;                 | blob/master/src/karabiner_configurator/keys_info.clj        |
; Goku Rules      | https://github.com/yqrashawn/GokuRakuJoudo/                 |
;                 | blob/master/src/karabiner_configurator/rules.clj            |
; From Modifiers: | https://karabiner-elements.pqrs.org/docs/json/              |
;                 | complex-modifications-manipulator-definition/from/modifiers/|
; Examples:       | https://github.com/yqrashawn/GokuRakuJoudo/                 |
;                 | blob/master/examples.org                                    |
; Sample Configs: | https://github.com/yqrashawn/GokuRakuJoudo/                 |
;                 | tree/master/resources/configurations/edn                    |
;--------------------------------------------------------------------------------|
{:cheatsheet {:!Ca "command a" ;; mandatory left_command
              :!Ta "control a" ;; mandatory left_control
              :!Oa "option a"
              :!Sa "shift a"
              :#Sa "shift a" ;; keycode a, optional left_shift
              :!CTOa "command control option a"
              :!Cspacebar "command space"
              :!Fa "fn a"
              :##a "keycode a optional any"
              :!!a "mandatory hyper(control command option shift) a "}
 ; :sim 50 :delay 500 :alone 500 :held 500 :simlayer-threshold 210
 ; :sim 50 :delay 50 :alone 100 :held 500 :simlayer-threshold 210
 ; :sim 50 :delay 50 :alone 1000 :held 500 :simlayer-threshold 210

 ; faster settings
 ; :sim 5 :delay 0 :alone 50 :held  100
 ; :simlayer-threshold 500

 :sim 500 :delay 50 :alone 50 :held 500 :afterup 0
 :simlayer-threshold 500
 :templates {:open "open \"%s\""
             :launch-app "open -a '%s'"
             :activate "osascript -e 'tell application \"%s\" to activate'"
             :alfred "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
             :km "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
             :km-with-argument "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\" with parameter \"%s\"'"
             :btt2 "osascript -e k'
                tell application \"BetterTouchTool\"
                    if frontmost then
                        set visible to false
                    else
                        activate
                        if (count windows) is 0 then
                            open home
                        end if
                        set index of window 1 to 1
                    end if
                end tell'"
             :btt "osascript -e k'
                  tell application \"BetterTouchTool\"
                  execute_assigned_actions_for_trigger \"%s\"
                end tell'"
             :toggle-finder "osascript -e k'
                tell application \"Finder\"
                    if frontmost then
                        set visible to false
                    else
                        open -a \"Finder\"
                        activate
                        if (count windows) is 0 then
                            open home
                        end if
                        set index of window 1 to 1
                    end if
                end tell'"
             ; TOGGLE BROWSER: most useful if finder assigned to "all-desktops"
             :toggle-browser "osascript -e '
                tell application \"Google Chrome\"
                    if frontmost then
                        set visible of process \"Google Chrome\" to false
                    else
                        activate
                        if (count windows) is 0 then
                            open home
                        end if
                        set index of window 1 to 1
                    end if
                end tell'"
             :screen_capture_clipboard "screencapture -ixc" ;; Capture screen interactive and silent to clipboard
             :screen_capture_preview "screencapture -ixP" ;; Capture screen interactive and silent to Preview.
             ;; Note: Allow 'karabiner_console_user_server'
             ;; to record the screen in 'System Preferences' /
             ;; 'Security & Privacy' / 'Privacy' / 'Screen Recording'.
             ; Enable or disable "Play user interface sound effects"
             ; ui_audio_enabled 0 (off) or 1 (on)
             :ui_audio_enabled "defaults write 'Apple Global Domain' com.apple.sound.uiaudio.enabled -int %s"
             :notification "osascript -e 'display notification \"%s\" with title \"%s\"'"}
 :devices {:cidoo-v65 [{:vendor_id 12815 :product_id 20565}]
           :gmk67 [{:vendor_id 1452 :product_id 591}]}
 :layers {; implement caps lock mode
          ; :caps_layer {:key :caps_lock :alone {:key :CTOleft_shift}}
          ; :caps_layer {:key :caps_lock :alone {:key :CTOleft_shift}}
          ; make tab a layer if/when it is held
          :tab_layer {:key :tab :alone {:key :tab}}}
 :simlayers {;; make w key a simlayer key
             ;; layers works too, but only recommended for none typing keys like . , tab
             ;; or keys like z, which used less often
             ; :a-mode {:key :a}
             :maestro-mode {:key :q}
             ; implement vs code mode
             ; DISABLED FOR LAUNCH MODE V2
             ; :launch-mode {:key :w}
             ; :q-mode {:key :q}
             ; :wez-mode  {:key :1}
             ;
            ;;  :right_command_layer {:key :right_command}
             ;
             ; :vim-movement-mode {:key :e}
             ;; :caps2-mode  {:key :caps_lock}
             :fn_layer {:key :fn :alone {:modi [:fn]}}}
            ;;  :superduper-mode {:key :f20}

 ; Find app ID using applescript: osascript -e 'id of app "Finder"'
 :applications {:code ["^com\\.microsoft\\.VSCode?$"]
                ; :code ["com.microsoft.VSCode"]
                :finder ["^com\\.apple\\.finder$"]
                :1password ["^com\\.1password\\.1password$"]
                :wezterm ["^com\\.github\\.wez\\.wezterm$"]
                :obsidian ["^md\\.obsidian$"]
                :allterminals ["^com\\.wez\\.term$"
                            "^org\\.alacritty$"
                            "^net\\.kovidgoyal\\.kitty$"
                            "^com\\.microsoft\\.VSCode?$"
                            "^com\\.neovide\\.neovide$"]
                :terminals ["^com\\.wez\\.term$"
                            "^org\\.alacritty$"
                            "^net\\.kovidgoyal\\.kitty$"
                            "^com\\.microsoft\\.VSCode?$"
                            "^com\\.neovide\\.neovide$"]
                :coding ["^com\\.github\\.wez\\.wezterm$"
                         "^org\\.alacritty$"
                         "^net\\.kovidgoyal\\.kitty$"
                         "^com\\.microsoft\\.VSCode$"
                         "^com\\.neovide\\.neovide$"]
                :bitwig ["^com\\.bitwig\\.studio$"]}
 :main [;; each manipulator has a description and multiple rules
        ;; karabiner docs: ;; https://pqrs.org/osx/karabiner/json.html#complex_modifications-manipulator-definition
        ;; <other options> includs ~to_if_alone~, ~to_if_held_down~,~to_after_key_up~, ~to_delayed_action~ and ~parameters~.
        ;;

        ;; (custom variables) & modifiers -> Advanced
        ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#custom-variable

        ;;{:des "testing"
        ;; :rules [;; Alt -> Hyper
        ;; [:##right_alt :!QWEright_shift]

        ;; easier reach to modifier keys
        ;;[:##slash :right_command  nil {:alone :slash}]
        ;; [:##z     :left_control   nil {:alone :z}]

        ;; easier key launches
        ;;[[:f :j] :!Ospacebar] ;; alfred

        ;; Alt -> [] or Meh(Control Shift Option): secondary thumb keys
        ;; [:right_alt :!CTOleft_shift :apple]
        ;; [:##application :!TOleft_shift :g915]
        ; [:##left_control :!TOleft_shift :apple]
        ;;         ]}
        {:des "modifier keys for certain devices"
         :rules [:gmk67
                 ; [:##left_command :left_option]
                 ; [:##left_option :left_command]
                 [:##right_option :left_option]]}
        {:des "caps is CS1 in bitwig"
         :rules [:bitwig [:!CS1 :caps_lock]]}
        {:des "additional modifier keys on fn layer"
         :rules [:fn_layer
                 [:left_control :!Sf1]
                 [:left_option :!Sf2]
                 [:left_command :!Sf3]
                 [:spacebar :!Sf4]
                 [:right_command :!Sf5]
                 [:right_shift ["fn-shift" 1]]]}
         ; {:des "caps lock -> escape(alone) and caps lock -> hyper"
         ;          :rules [[:condi :!coding] [:##caps_lock :!CTOleft_shift nil {:alone :escape}]]}

                 {:des "ctrl+esc is grave accent"
                  :rules [[:!Tescape :grave_accent_and_tilde]
                          [:!CSescape :!Sgrave_accent_and_tilde]]}
                 {:des "cmd+escape is cmd+grave"
                  :rules [[:!Cescape :!Cgrave_accent_and_tilde]]}

                 {:des "caps lock -> escape(alone), held -> ctrl"
                  :rules [[:condi :coding]
                          [:##caps_lock :left_control nil {:to_if_held :escape}]]}
                 {:des "tab layer"
                  :rules [:tab_layer
                          ; [:e [:!CTOshift :down_arrow]]
                          [:e :launchpad]
                          [:d :mission_control]
                          [:escape [:left_control :escape]]
                          [:right_shift :!Otab]]}
                ;;  {:des "caps lock + escape -> ctrl + escape"
                ;;   :rules [[:condi :coding]
                ;;           [:##caps_lock :tab :escape] :!Cescape]}
                ;;  {:des "right command layer"
                ;;   :rules [:right_command_layer
                ;;           [:comma :f17]
                ;;           [:period :f18]
                ;;           [:slash :f19]
                ;;           [:right_shift :f20]]}
        {:des "Change right_command to command-tab when used alone"
         :rules [[:right_command :right_command nil {:alone [:!Ctab]}]]}

        {:des "Change right_option to 4 modifiers combination, f17 when used alone"
         :rules [[:right_option :!COTleft_shift nil {:alone [:f17]}]]}
                  {:des "Tmux Mode [Q] as Trigger Key"
         :rules [:tmux-winmove-mode ;Ta is the prefix for tmux
                 [:comma [:!Ta :comma]]
                 [:open_bracket [:!Ta :open_bracket]]
                 [:close_bracket [:!Ta :close_bracket]]
                 [:hyphen [:!Ta :hyphen]]
                 [:backslash [:!Ta :backslash]]
                 [:f [:!Ta :f]]
                 [:e [:!Ta :e]]
                 [:w [:!Ta :w]]
                 [:h [:!Ta :h]]
                 [:j [:!Ta :j]]
                 [:k [:!Ta :k]]
                 [:l [:!Ta :l]]
                 [:v [:!Ta :v]]
                 [:s [:!Ta :s]]
                 [:m [:!Ta :z]]
                 [:x [:!Ta :x]]
                 [:c [:!Ta :c]]
                 [:1 [:!Ta :1]]
                 [:2 [:!Ta :2]]
                 [:3 [:!Ta :3]]
                 [:4 [:!Ta :4]]
                 [:5 [:!Ta :5]]]}
  {:des "Hyper Mode - Deletion"
         :rules [:hyper-mode
                 [:n :!Odelete_or_backspace]
                 [:m :delete_or_backspace]
                 [:comma :delete_forward]
                 [:period :!Odelete_forward]
                 [:!Cn :!Cdelete_or_backspace]
                 [:!Cm :!Cdelete_or_backspace]
                 [:!Ccomma :!Cdelete_forward]
                 [:!Cperiod :!Cdelete_forward]]}
                 {:des "SD Mode <- S+D" :rules [[{:sim [:s :d]
                                                  :simo {:interrupt true
                                                         :dorder :insensitive
                                                         :uorder :insensitive
                                                         :afterup {:set ["superduper-mode" 0]}}} {:set ["superduper-mode" 1]}]]}
                 {:des "SD Mode" :rules [:superduper-mode
                                         [:##u :!S0]
                                         [:##e :!S1]
                                         [:##r :!S2]
                                         [:##t :!S3]
                                         [:##h :0]
                                         [:##l :!S4]
                                         [:##g :!S5]
                                         [:##k :!S6]
                                         [:##j :!S8]
                                         [:##i :!S9]]}
                 ; {:des "SD Mode B -> Ctrl+B (Tmux prefix)" :rules [:superduper-mode [:##b :!Tb]]}
                 ; {:des "SD Mode Z -> Undo" :rules [:superduper-mode [:##z :!Cz]]}
                 ; {:des "vim movement mode"
                 ;  :rules [:vim-movement-mode
                 ;          [[:y :y] :end]]}
                 ;;  {:des "caps_lock layer"
                 ;;   :rules [[:condi :caps2-mode :!coding]
                 ;;     ; vim keys
                 ;;     ; navigation
                 ;;           [:##h :left_arrow] ; even with f, still do left
                 ;;           [:##k :up_arrow]
                 ;;           [:##j :down_arrow]
                 ;;           [:##l :right_arrow]
                 ;;           [:##3 :home]
                 ;;           [:##4 :end]
                 ;;           [:##s :return_or_enter]
                 ;;           [:##f :delete_or_backspace]
                 ;;           [:##g :escape]
                 ;;           [:##x :delete_forward]
                 ;;           ; [:##left_arrow [:!CTOleft_shift :left_arrow]
                 ;;           [:##up_arrow :!Tup_arrow]
                 ;;           [:##escape :grave_accent_and_tilde]]}
                 {:des "D+F as Hyper (CMD+OPT+CTRL)" :rules [[[:d :f] :!COleft_control]]}
                 {:des "Press right_shift twice to enter double shift mode, press right_shift once to leave it"
                  :rules [[:right_shift ["double-right-shift-mode" 1] ["shift-pressed-once" 1]]
                          [:right_shift [:right_shift ["shift-pressed-once" 1]] ["double-right-shift-mode" 0] {:delayed {:invoked ["shift-pressed-once" 0] :canceled ["shift-pressed-once" 0]}}]
                          :double-right-shift-mode
                          [:right_shift ["double-right-shift-mode" 0]]
                          [:1 [:notification "double shift mode"]]]}
                 {:des "fn keys"
                  :rules [[:!CS1 :f1 :!code]
                          [:!CS2 :f2 :!code]
                          [:!CS3 :f3 :!code]
                          [:!CS4 :f4 :!code]
                          [:!CS5 :f5 :!code]
                          [:!CS6 :f6 :!code]
                          [:!CS7 :f7 :!code]
                          [:!CS8 :f8 :!code]
                          [:!CS9 :f9 :!code]
                          [:!CS0 :f10 :!code]
                          [:!CShyphen :f11 :!code]
                          [:!CSequal_sign :f12 :!code]
                          [:!OS1 :!Sf1 :!code]
                          [:!OS2 :!Sf2 :!code]
                          [:!OS3 :!Sf3 :!code]
                          [:!OS4 :!Sf4 :!code]
                          [:!OS5 :!Sf5 :!code]
                          [:!OS6 :!Sf6 :!code]
                          [:!OS7 :!Sf7 :!code]
                          [:!OS8 :!Sf8 :!code]
                          [:!OS9 :!Sf9 :!code]
                          [:!OS0 :!Sf10 :!code]
                          [:!OShyphen :!Sf11 :!code]]}

                 {:des "maestro-mode"
                  :rules [[:condi :maestro-mode :!coding]
                          [:d [:km "1 2FA Market"]]
                          [:e [:km "0 Login V2"]]]} ;; WIP
                 {:des "QW Mode <- Q+W" :rules [[{:sim [:q :w]
                                                  :simo {:interrupt true
                                                         :dorder :insensitive
                                                         :uorder :insensitive
                                                         :afterup {:set ["qw-mode" 0]}}} {:set ["qw-mode" 1]}]]}
                 {:des "QW Mode (alternate launch mode)"
                  :rules [:qw-mode
                          [:k [:open "/Applications/Microsoft Edge.app"]]
                          [:u [:open "/Applications/Arc.app"]]]}
                 ]}
        ; disabled
        {:des "launch mode v2 rules"
         :rules [:launch-mode-2
                 [:h [:open "/Applications/WezTerm.app"]]
                 [:j [:open "/Applications/Visual Studio Code.app"]]
                 [:k [:open "/Applications/Google Chrome.app"]]
                 [:l [:open "/Applications/Obsidian.app"]]
                 [:semicolon [:open "/Applications/Notion.app"]]
                 ; [:period [:open "/Applications/Notion.app"] :qw-mode]

                 ;; 1st row
                 [:u [:open "/Applications/Things3.app"]]
                 [:y [:open "/Applications/TickTick.app"]]
                 ; [:g [:open "/Applications/Setapp/NotePlan.app"]]
                 ;; Numbers right above productivity keys
                 [:6 [:open "/Applications/Setapp/Timing.app"]]
                 [:7 [:open "/Applications/Structured.app"]]
                 [:8 [:open "/Applications/Setapp/NotePlan.app"]]

                 ;; 3rd row
                 [:o [:open "/Users/aaron/Applications/Chrome Apps.localized/Ollama Web UI.app"]]

                 [:n [:open "/Applications/KeePassXC.app"]]
                 [:m [:open "/Applications/1Password.app"]]
                 [:t [:open "/Applications/Taskade.app"]]
                 [:f [:toggle-finder]]
                 ;; 1st row (left)
                 ; [:g [:toggle-browser]]
                 ; [:q [:open "/Applications/Setapp/GoodTask.app"]]
                 [:e [:open "/Applications/Warp.app"]]
                 [:r [:open "/Applications/Spotify.app"]]
                 [:t [:open "/Applications/AI Chat Bot.app"]]
                 ;; 3nd row (left, skipping w)
                 [:z [:open "/Applications/QSpace Pro.app"]]
                 [:c [:open "/System/Applications/Calendar.app"]]]}}
